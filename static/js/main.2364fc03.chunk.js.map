{"version":3,"sources":["go_roman/GoRoman.js","App.js","serviceWorker.js","index.js"],"names":["FirstComponent","props","handleChange","e","setState","textBoxValue","target","value","state","time","Date","toLocaleTimeString","textBoxSug","this","prevState","interval","setInterval","tick","clearInterval","inputElem","type","placeholder","onChange","textElem","timeElem","className","displaytext","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OAEqBA,G,kBAQjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAPVC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVC,aAAcF,EAAEG,OAAOC,SAM3B,EAAKC,MAAQ,CACTC,MAAM,IAAIC,MAAOC,qBACjBC,WAAY,wBAJD,E,oEASfC,KAAKT,UAAS,SAAAU,GAAS,MAAK,CAC1BL,MAAM,IAAIC,MAAOC,2B,0CAIF,IAAD,OAChBE,KAAKE,SAAWC,aAAY,kBAAM,EAAKC,SAAQ,O,6CAI/CC,cAAcL,KAAKE,Y,+BAInB,IAAMI,EAAc,6BAChB,2BACIC,KAAK,OACLC,YAAaR,KAAKL,MAAMI,WACxBU,SAAUT,KAAKX,gBAEjBqB,EAAY,6BAAMV,KAAKL,MAAMH,cAE7BmB,EAAY,6BACE,wCAAiB,2BAAIX,KAAKL,MAAMC,OAGpD,OAAQ,yBAAKgB,UAAU,YACf,wCACCZ,KAAKZ,MAAMyB,YACXP,EACAI,EACAC,O,GAhD2BG,cCEvBC,E,iLAEjB,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,CAASC,YAAY,0B,GAJIC,aCQbE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2364fc03.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nexport default class FirstComponent extends Component{\n\n    handleChange = (e) => {\n        this.setState({\n            textBoxValue: e.target.value\n        });\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = { \n            time: new Date().toLocaleTimeString(),\n            textBoxSug: \"Please type a number\"\n        };\n    }\n\n    tick() {\n        this.setState(prevState => ({\n          time: new Date().toLocaleTimeString()\n        }));\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => this.tick(), 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n    \n    render(){\n        const inputElem = ( <div>\n            <input \n                type=\"text\"\n                placeholder={this.state.textBoxSug}\n                onChange={this.handleChange}/>\n        </div>);\n        const textElem = (<div>{this.state.textBoxValue}</div>);\n\n        const timeElem = (<div>\n                            <h4>It is : </h4><i>{this.state.time}</i>\n                        </div>);\n\n        return (<div className=\"comptext\">\n                <h3>GO ROMAN</h3>\n                {this.props.displaytext}\n                {inputElem}\n                {textElem}\n                {timeElem}\n            </div>\n           \n        );\n    }\n}","import React, {Component} from 'react';\nimport './App.css';\nimport GoRoman from './go_roman/GoRoman'\n\nexport default class App extends Component{\n  render(){\n    return (\n      <div className=\"App\">\n        <GoRoman displaytext=\"Let's go Roman!!\"/>       \n      </div>)\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}